>>> add_integer = __import__('0-add_integer').add_integer

===============
PASS TEST CASE:
================
>>> add_integer(1, 2)
3


>>> add_integer(100, -2)
98


>>> add_integer(2)
100


>>> add_integer(100.3, -2)
98

=================
FAILED CASES:
==================
>>> add_integer(4, "School")
Traceback (most recent call last):
	...
....raise TypeError("b must be an integer")
TypeError: b must be an integer


>>> add_integer("School", 4)
Traceback (most recent call last):
	...
....raise TypeError("b must be an integer")
TypeError: a must be an integer


>>> add_integer(None)
Traceback (most recent call last):
	...
TypeError: a must be an integer


>>> add_integer(1, None)
Traceback (most recent call last):
	...
...raise TypeError("b must be an integer")
TypeError: b must be an integer


>>> ...
Ellipsis

>>> add_integer(1, 2, 3)
Traceback (most recent call last):
	...
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given


>>> add_integer()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() missing 1 required positional argument: 'a'


=================
OVERFLOW ERROR:
=================
>>> add_integer(324963, 344352342343e23453245)
Traceback (most recent call last):
	...
    return int(a) + int(b)
OverflowError: cannot convert float infinity to integer

