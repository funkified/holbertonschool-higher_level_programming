======================
Using BaseGeometry
=====================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>>

========================
Cheking for lenght
========================
>>> m = __import__('7-base_geometry').__doc__
>>> len(m) > 1
True
>>> c = __import__('7-base_geometry').BaseGeometry.__doc__
>>> len(c) > 1
True
>>> 

===========================
Calling area()
===========================
>>> b = bg()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'BaseGeometry' object is not callable
>>> b = BaseGeometry()
>>> b.area()
Traceback (most recent call last):
	...
Exception: area() is not implemented
>>> b.area(1)
Traceback (most recent call last):
	...
TypeError: area() takes 1 positional argument but 2 were given
>>>

===========================
Checking for strings
===========================
>>> b.integer_validator("int", 1)
>>> b.integer_validator("int", 0)
Traceback (most recent call last):
	...
ValueError: int nust be greater than 0
>>> b.integer_validator("int", -5)
Traceback (most recent call last):
	...
ValueError: int nust be greater than 0
>>> b.integer_validator("bool", True)
Traceback (most recent call last):
	...
TypeError: bool must be integer
>>> b.integer_validator("float", 2.5)
Traceback (most recent call last):
	...
TypeError: float must be integer

========================================
Testing with arguments
=======================================
>>> b.integer_validator()
Traceback (most recent call last):
	...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>>
